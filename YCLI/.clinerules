# Cline Rules: y-cli

## Project Patterns

### Directory Structure
- src/ contains all source code
- Modular organization by feature (bot, chat, cli, mcp_server)
- Consistent package structure within modules
- Clear separation of concerns

### Code Organization
- Models define data structures
- Repositories handle persistence
- Services contain business logic
- Commands implement CLI interface
- Utils provide shared functionality

### Implementation Patterns
- Type hints used throughout
- Repository pattern for data access
- Service layer pattern for business logic
- Provider pattern for external services
- Command pattern for CLI structure

## Critical Paths

### Chat System
- Provider selection and initialization
- Message handling and formatting
- Session management
- Import/export operations

### Bot Management
- Bot configuration and setup
- State persistence
- Service integration
- Command processing

### MCP Integration
- Server configuration
- Protocol implementation
- Tool/resource management
- System integration

## User Preferences

### Documentation
- Comprehensive memory bank
- Clear module documentation
- Detailed implementation notes
- Regular updates on progress

### Code Style
- PEP 8 compliance
- Clear type hints
- Descriptive docstrings
- Consistent naming

## Known Challenges

### Integration
- Multiple chat provider support
- MCP server management
- Bot state persistence
- Command coordination

### Technical
- Cross-platform compatibility
- Performance optimization
- Error handling
- State management

## Tool Usage

### Development Tools
- UV for package management
- Poetry for dependency management
- Git for version control
- Type checking tools

### Testing Tools
- Unit test framework
- Integration tests
- Mock implementations
- Test utilities

## Evolution Notes

### Initial Setup
- Created memory bank structure
- Established documentation patterns
- Mapped system architecture
- Documented technical context

### Future Considerations
- Provider implementation details
- Bot workflow refinements
- MCP integration patterns
- CLI command relationships

## Project Intelligence

### Key Insights
- Modular architecture enables extension
- Service layer provides abstraction
- Repository pattern simplifies storage
- Provider pattern allows flexibility

### Learning Points
- Clear documentation is critical
- Consistent patterns aid maintenance
- Type hints improve reliability
- Modular design enables growth
